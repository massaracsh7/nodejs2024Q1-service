// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  login     String
  password  String
  version   Int    @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id     String       @id @default(uuid())
  name   String
  grammy Boolean
  albums Album[]
  tracks Track[]
  favorites FavoritesArtist?

  @@map("artist")
}

model FavoritesArtist {
  id       Int         @id @default(autoincrement())
  artistId String      @unique
  artist   Artist      @relation(fields: [artistId], references: [id])

  @@map("favouritesArtist")
}

model Album {
  id       String      @id @default(uuid())
  name     String
  year     Int
  artistId String?
  artist   Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull)
  tracks   Track[]
  favorites   FavoritesAlbum[]

  @@map("album")
}

model FavoritesAlbum {
  id      Int         @id @default(autoincrement())
  albumId String      @unique
  album   Album       @relation(fields: [albumId], references: [id])

  @@map("favouritesAlbum")
}

model Track {
  id       String      @id @default(uuid())
  name     String
  artistId String?
  artist   Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull)
  albumId  String?
  album    Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull)
  duration Int
  favorites  FavoritesTrack[]

   @@map("track")
}

model FavoritesTrack {
  id      Int    @id @default(autoincrement())
  trackId String @unique
  track   Track  @relation(fields: [trackId], references: [id])

  @@map("favouritesTrack")
}
